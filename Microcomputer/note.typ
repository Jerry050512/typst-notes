#import "../template/conf.typ": conf
#import "../template/components.typ": *

#show: conf.with(
  title: [
    微机原理
  ],
  authors: (
    (
      name: [Gang.],
      affiliation: [Hangzhou Dianzi University],
      email: "jerry050512@outlook.com",
    ),
  )
)

= 课程介绍 & 微机概述

== 冯诺依曼结构

/ 冯诺依曼结构: 

== 计算机分类

*区分* 
- 普林斯顿结构, 哈佛结构
- 指令体系: RISC (精简指令计算机), CISC (复杂指令计算机)

= MCS-51内部结构

- 并行I/O口: 4个8位I/O口, P0-P3, 具有第二功能. 
- 中断系统: 具有5个中断源, 2个中断优先权. (串行口手动清标志位, 其他硬件自动清零)
- 定时器/计数器: 有2个16位的定时器/计数器, 具有4个工作方式. 
- 串行接口: 1个全双工的串行口, 用于微控制器与具有串行街斗的外设进行异步串行通信, 也可以拓展I/O口. ($A<->B$可同时通信)
- 布尔处理器: 具有较强的位寻址, 位处理能力. 
- 时钟电路: 产生位控制器工作所需的时钟脉冲(需要外接晶体震荡器和微调电容)
- 指令系统: 5大功能, 111条指令, 位复杂指令系统(CISC). 

== 控制器

=== 指令计数器 `PC (Program Counter)`

- `16`位按机器周期自动增`1`计数器
- 总是指向下一条命令所在首地址
- 一切分支/跳转/调用/中断/复位 均为改变`PC`值
- 用户不可直接读写
- `PC`的值的范围为`0000H~FFFFH`, 可寻址范围为`64K`

=== 堆栈指针 `SP`

- 在片内RAM`128`字节中开辟栈区, 随之跟踪栈顶地址
- 先进后出(LIFO, Last In First Out)
- 开机复位栈底指针 `07H`

=== 数据指针 `DPTR`

- 供用户使用的`16`位寄存器, `DPH`高八位

== 运算器

=== 累加器 `ACC`

=== 程序状态字 `PSW`

`PSW.7~0`分别为: `CY`, `AC`, `F0`, `RS1`, `RS0`, `OV`, `F1`, `P`

- `CY(PSW.7)` 进位/接位标志位
- `AC(PSW.6)` 半进位/借位标志位
- `F0(PSW.5), F1(PSW.1)` 用户定义标志位
- `P` 奇偶标志位 (累加器A)

/ 奇偶校验: 在发送的`8`位数据后追加`1`位, 使得发送的数据有偶数个`1`.

== 存储器

- 数据存储器 RAM (Random Access Memory)
- 程序存储器 ROM (Read Only Memory)

`MOV`, `MOVX`, `MOVC` 三个指令


=== 程序存储器

- 分为内部和外部ROM
- $overline(E A) = 1$表示内部, 为$0$ 表示外部. 

- `00H~7FH` 低128字节 内部RAM区
  - 工作寄存区
  - 位寻址区
  - 用户寄存区
- `80H~FFH` 高128字节 专用寄存器

特殊区域

- `0000H~0002H` `PC`指针复位处
- `0003H~000AH` 外部中断0中断地址区
- `000BH~0012H` 定时器/计数器0中断区
- ...

=== 数据存储器

...

== 控制器引脚

最小系统: 晶振, 复位, 电源, 时钟, EA. 

=== 时钟引脚

- 接晶振
- 2分频后状态时钟, 6分频 ALE, 12分频 机器周期

- 振荡周期
- 状态周期
- 机器周期
- 指令周期

=== 复位引脚

复位电路(手动复位包含上电复位): 

=== 控制引脚 `ALE / PSEN`

=== `P0` 口

- 接上拉电阻(仅P0)
- 输入: 先拉高再读(其他P口也如此)

= 指令系统

== 指令格式

```asm
ANNOTATION: COMMAND TARGET, SOURCE  ; comment
```

== 寻址方式

- 立即寻址
- 直接寻址
- 寄存器寻址
- 间址寻址
- 变址寻址
- 相对寻址
- 位寻址

== 数据传送类

== 算数运算类

== 控制转移类

== 伪指令

与编译器的约定. 

= 单片机扩展及应用

== 三总线结构

/ 地址总线: 
/ 数据总线: 
/ 控制总线: 

= 中断系统

== 结构

- 5个中断源
- 使能控制, 优先级控制, 中断标识
- CPU #sym.arrow 中断响应程序

== 中断入口

= 定时器

== 结构

= 人机交互

== 键盘

=== 去抖

- 硬件去抖
- 软件去抖

== 数码管

- 共阴极数码管
- 共阳极数码管

= 串行口

/ 波特率: 

= 模拟口

